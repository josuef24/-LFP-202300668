package views;

import java.awt.Image;
import javax.swing.*;
import java.awt.event.*;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author jmfuente
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    private List<models.Mundo> mundosAnalizados = new ArrayList<>();

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        comboMapas.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String nombreSeleccionado = (String) comboMapas.getSelectedItem();
                if (nombreSeleccionado != null && !nombreSeleccionado.isEmpty()) {
                    generarMapa(nombreSeleccionado);
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGenerarReportes = new javax.swing.JButton();
        comboMapas = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaTexto = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        lblImagenMapa = new javax.swing.JLabel();
        btnCargarArchivo = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnAnalizarArchivo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnGenerarReportes.setText("Generar reportes");
        btnGenerarReportes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarReportesActionPerformed(evt);
            }
        });

        comboMapas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtAreaTexto.setColumns(20);
        txtAreaTexto.setRows(5);
        txtAreaTexto.setName(""); // NOI18N
        jScrollPane1.setViewportView(txtAreaTexto);

        lblImagenMapa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImagenMapa.setText("Mapa no cargado");
        lblImagenMapa.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jScrollPane2.setViewportView(lblImagenMapa);

        btnCargarArchivo.setText("Cargar archivos");
        btnCargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarArchivoActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar Ã¡rea");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnAnalizarArchivo.setText("Analizar archivo");
        btnAnalizarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarArchivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCargarArchivo)
                        .addGap(18, 18, 18)
                        .addComponent(btnLimpiar)
                        .addGap(18, 18, 18)
                        .addComponent(btnAnalizarArchivo)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnGenerarReportes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboMapas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)))
                        .addGap(62, 62, 62))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGenerarReportes)
                    .addComponent(comboMapas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCargarArchivo)
                    .addComponent(btnLimpiar)
                    .addComponent(btnAnalizarArchivo))
                .addContainerGap(84, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarArchivoActionPerformed
        cargarArchivo();
    }//GEN-LAST:event_btnCargarArchivoActionPerformed

    private void btnAnalizarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarArchivoActionPerformed
        analizarArchivo();
        procesarEntradaYMostrarMundos();
    }//GEN-LAST:event_btnAnalizarArchivoActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiarArea();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnGenerarReportesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarReportesActionPerformed
        generarReportes();
    }//GEN-LAST:event_btnGenerarReportesActionPerformed

    /**
     * @param args the command line arguments
     */
    private void cargarArchivo() {
        JFileChooser fileChooser = new JFileChooser();

        // Filtro para archivos .lfp
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos .lfp", "lfp");
        fileChooser.setFileFilter(filtro);

        int resultado = fileChooser.showOpenDialog(this);

        if (resultado == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();

            try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
                StringBuilder contenido = new StringBuilder();
                String linea;
                while ((linea = br.readLine()) != null) {
                    contenido.append(linea).append("\n");
                }
                txtAreaTexto.setText(contenido.toString());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al leer el archivo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void mostrarImagen(String rutaImagen) {
        ImageIcon icono = new ImageIcon(rutaImagen);
        lblImagenMapa.setIcon(icono);
        lblImagenMapa.setText(null); // Quitar texto de placeholder
    }

    private void limpiarArea() {
        txtAreaTexto.setText("");
        lblImagenMapa.setIcon(null);
        lblImagenMapa.setText("Mapa no cargado");
    }

    private void analizarArchivo() {
        String contenido = txtAreaTexto.getText();
        comboMapas.removeAllItems(); // limpiar comboBox

        if (contenido.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay contenido para analizar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Buscar todas las coincidencias de: world "Nombre"
        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("world\\s+\"([^\"]+)\"");
        java.util.regex.Matcher matcher = pattern.matcher(contenido);

        boolean encontrado = false;
        while (matcher.find()) {
            String nombreMundo = matcher.group(1);
            comboMapas.addItem(nombreMundo);
            encontrado = true;
        }

        if (!encontrado) {
            JOptionPane.showMessageDialog(this, "No se encontraron mundos vÃ¡lidos en el texto.", "Sin resultados", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void procesarEntradaYMostrarMundos() {
        String texto = txtAreaTexto.getText();

        parser.AnalizadorLexico analizadorLex = new parser.AnalizadorLexico(texto);
        analizadorLex.analizar();

        if (!analizadorLex.getErrores().isEmpty()) {
            System.err.println("Errores lÃ©xicos encontrados:");
            for (parser.Token err : analizadorLex.getErrores()) {
                System.err.println(err);
            }
            lblImagenMapa.setIcon(null);
            lblImagenMapa.setText("Mapa no cargado");
            mundosAnalizados.clear();
            comboMapas.removeAllItems();
            return;
        }

        parser.AnalizadorSintactico analizadorSin = new parser.AnalizadorSintactico(analizadorLex.getTokens());
        analizadorSin.iniciar();

        mundosAnalizados = analizadorSin.getMundos(); // â AquÃ­ se guarda lo nuevo

        comboMapas.removeAllItems();
        for (models.Mundo mundo : mundosAnalizados) {
            comboMapas.addItem(mundo.nombre);
        }
    }

    private void probarAnalizadorLexico() {
        String texto = txtAreaTexto.getText();

        parser.AnalizadorLexico analizador = new parser.AnalizadorLexico(texto);
        analizador.analizar();

        System.out.println("=== TOKENS ===");
        for (parser.Token token : analizador.getTokens()) {
            System.out.println(token);
        }

        System.out.println("=== ERRORES ===");
        for (parser.Token error : analizador.getErrores()) {
            System.out.println(error);
        }
    }

    private void generarReportes() {
        String texto = txtAreaTexto.getText();

        parser.AnalizadorLexico analizador = new parser.AnalizadorLexico(texto);
        analizador.analizar();

        parser.AnalizadorSintactico analizadorSin = new parser.AnalizadorSintactico(analizador.getTokens());
        analizadorSin.iniciar();

        List<parser.Token> erroresLexicos = analizador.getErrores();
        List<parser.Token> erroresSintacticos = analizadorSin.getErroresSintacticos();

        utils.Reporte.generarReporteTokens(analizador.getTokens());
        utils.Reporte.generarReporteErroresSeparados(erroresLexicos, erroresSintacticos);

        if (!erroresLexicos.isEmpty() || !erroresSintacticos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Se encontraron errores. No se puede graficar hasta corregirlos.", "Errores detectados", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Reporte generado exitosamente. No se encontraron errores.", "Sin errores", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void generarMapa(String nombreMundo) {
        models.Mundo mundo = null;

        for (models.Mundo m : mundosAnalizados) {
            if (m.nombre.equals(nombreMundo)) {
                mundo = m;
                break;
            }
        }

        if (mundo != null) {
            utils.GeneradorMapa.generarArchivoDot(mundo);
            String baseNombre = mundo.nombre.replaceAll("[^a-zA-Z0-9_\\-]", "_");
            String archivo = "graficos/" + baseNombre + ".png";

            // Forzar recarga real de imagen desde el disco
            try {
                Image image = javax.imageio.ImageIO.read(new File(archivo));
                if (image != null) {
                    lblImagenMapa.setIcon(new ImageIcon(image));
                    lblImagenMapa.setText(null);
                } else {
                    lblImagenMapa.setText("No se pudo cargar la imagen del mapa.");
                }
            } catch (IOException e) {
                lblImagenMapa.setText("Error al leer la imagen del mapa.");
                e.printStackTrace();
            }
        } else {
            lblImagenMapa.setText("No se encontrÃ³ el mundo para generar el mapa.");
        }

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizarArchivo;
    private javax.swing.JButton btnCargarArchivo;
    private javax.swing.JButton btnGenerarReportes;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JComboBox<String> comboMapas;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblImagenMapa;
    private javax.swing.JTextArea txtAreaTexto;
    // End of variables declaration//GEN-END:variables
}
